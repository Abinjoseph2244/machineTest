{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\ReactProjects\\\\new\\\\Reactmachinetask\\\\UI\\\\app\\\\src\\\\components\\\\Line.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getLineData } from '../api';\nimport { LineChart, XAxis, YAxis, Line, Tooltip } from '@mui/x-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default Line = _s(() => {\n  _s();\n  const [lineData, setLineData] = useState([]);\n  const [yData, setYData] = useState([]);\n  let xData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n  const generateYaxisKey = maxValue => {\n    let arr = [];\n    for (let i = 0; i <= maxValue; i += 2) {\n      arr.push(i);\n    }\n    return arr;\n  };\n  useEffect(() => {\n    getLineData().then(res => {\n      setLineData(res);\n    });\n    return () => {};\n  }, []);\n  useEffect(() => {\n    console.log('Graph data');\n    console.log(lineData);\n\n    // Create an array with 0 for each month\n    const filledYData = Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthData = lineData.find(elem => elem.x === xData[index]);\n      return monthData ? monthData.y : 0;\n    });\n    setYData(filledYData);\n  }, [lineData]);\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 500,\n    height: 300,\n    data: yData.map((value, index) => ({\n      x: index,\n      y: value\n    })),\n    children: [/*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      labelFormatter: value => xData[value]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}, \"2D1OoHYh1/Te/hfLzE3OxWgXYio=\");","map":{"version":3,"names":["React","useEffect","useState","getLineData","LineChart","XAxis","YAxis","Line","Tooltip","jsxDEV","_jsxDEV","_s","lineData","setLineData","yData","setYData","xData","generateYaxisKey","maxValue","arr","i","push","then","res","console","log","filledYData","Array","from","length","_","index","monthData","find","elem","x","y","width","height","data","map","value","children","dataKey","fileName","_jsxFileName","lineNumber","columnNumber","labelFormatter","type","stroke"],"sources":["D:/projects/ReactProjects/new/Reactmachinetask/UI/app/src/components/Line.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getLineData } from '../api';\r\nimport { LineChart, XAxis, YAxis, Line, Tooltip } from '@mui/x-charts';\r\n\r\nexport default Line = ()=>{\r\n    const [lineData, setLineData] = useState([]);\r\n    const [yData, setYData] = useState([]);\r\n\r\n    let xData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\r\n    const generateYaxisKey = (maxValue) => {\r\n        let arr = [];\r\n        for (let i = 0; i <= maxValue; i += 2) {\r\n            arr.push(i);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    useEffect(() => {\r\n        getLineData().then((res) => {\r\n            setLineData(res);\r\n        });\r\n        return () => {};\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Graph data');\r\n        console.log(lineData);\r\n\r\n        // Create an array with 0 for each month\r\n        const filledYData = Array.from({ length: 12 }, (_, index) => {\r\n            const monthData = lineData.find((elem) => elem.x === xData[index]);\r\n            return monthData ? monthData.y : 0;\r\n        });\r\n\r\n        setYData(filledYData);\r\n    }, [lineData]);\r\n\r\n    return (\r\n        <LineChart width={500} height={300} data={yData.map((value, index) => ({ x: index, y: value }))}>\r\n            <XAxis dataKey=\"x\" />\r\n            <YAxis />\r\n            <Tooltip labelFormatter={(value) => xData[value]} />\r\n            <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" />\r\n        </LineChart>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}