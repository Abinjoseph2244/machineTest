{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\ReactProjects\\\\new\\\\Reactmachinetask\\\\UI\\\\app\\\\src\\\\components\\\\Line.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getLineData } from '../api';\nimport { LineChart } from '@mui/x-charts/LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Line() {\n  _s();\n  const [lineData, setLineData] = useState([]);\n  const [yData, setYData] = useState([]);\n  let xData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n  const generateYaxisKey = maxValue => {\n    let arr = [];\n    for (let i = 0; i <= maxValue; i = +2) arr.push(i);\n    return arr;\n  };\n  useEffect(() => {\n    getLineData().then(res => {\n      setLineData(res);\n    });\n    return () => {};\n  }, []);\n  useEffect(() => {\n    console.log(\"Graph data\");\n    console.log(lineData);\n    setYData(lineData.map(elem => elem.y));\n  }, [lineData]);\n  return (\n    /*#__PURE__*/\n    // <div>GraphChart</div>\n    _jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      series: [{\n        yAxisKey: generateYaxisKey(yData[yData.length - 1] + 2).toString().substring(1, generateYaxisKey(yData[yData.length - 1] + 2).toString().length - 1),\n        data: yData\n      }],\n      xAxis: [{\n        scaleType: 'point',\n        data: xData\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(Line, \"2D1OoHYh1/Te/hfLzE3OxWgXYio=\");\n_c = Line;\nexport default Line;\nvar _c;\n$RefreshReg$(_c, \"Line\");","map":{"version":3,"names":["React","useEffect","useState","getLineData","LineChart","jsxDEV","_jsxDEV","Line","_s","lineData","setLineData","yData","setYData","xData","generateYaxisKey","maxValue","arr","i","push","then","res","console","log","map","elem","y","width","height","series","yAxisKey","length","toString","substring","data","xAxis","scaleType","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/projects/ReactProjects/new/Reactmachinetask/UI/app/src/components/Line.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getLineData } from '../api'\r\nimport { LineChart } from '@mui/x-charts/LineChart';\r\n\r\nfunction Line() {\r\n    const [lineData, setLineData] = useState([])\r\n    const [yData, setYData] = useState([])\r\n\r\n    let xData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n\r\n    const generateYaxisKey = (maxValue) => {\r\n        let arr = []\r\n        for (let i = 0; i <= maxValue; i = + 2)\r\n            arr.push(i)\r\n        return arr\r\n    }\r\n    useEffect(() => {\r\n        getLineData()\r\n            .then(res => {\r\n                setLineData(res)\r\n            })\r\n        return () => { }\r\n    }, [])\r\n    useEffect(() => {\r\n        console.log(\"Graph data\")\r\n        console.log(lineData)\r\n        setYData(lineData.map((elem) => elem.y))\r\n    }, [lineData])\r\n    return (\r\n        // <div>GraphChart</div>\r\n        <LineChart\r\n            width={500}\r\n            height={300}\r\n            series={[{\r\n                yAxisKey: generateYaxisKey(yData[yData.length - 1] + 2)\r\n                    .toString()\r\n                    .substring(1, generateYaxisKey(yData[yData.length - 1] + 2)\r\n                        .toString().length - 1),\r\n                data: yData\r\n            }]}\r\n            xAxis={[{ scaleType: 'point', data: xData }]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Line"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,SAAS,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,IAAIW,KAAK,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAEjG,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;IACnC,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,QAAQ,EAAEE,CAAC,GAAG,CAAE,CAAC,EAClCD,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;IACf,OAAOD,GAAG;EACd,CAAC;EACDf,SAAS,CAAC,MAAM;IACZE,WAAW,CAAC,CAAC,CACRgB,IAAI,CAACC,GAAG,IAAI;MACTV,WAAW,CAACU,GAAG,CAAC;IACpB,CAAC,CAAC;IACN,OAAO,MAAM,CAAE,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EACNnB,SAAS,CAAC,MAAM;IACZoB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzBD,OAAO,CAACC,GAAG,CAACb,QAAQ,CAAC;IACrBG,QAAQ,CAACH,QAAQ,CAACc,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,CAAC,CAAC,CAAC;EAC5C,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EACd;IAAA;IACI;IACAH,OAAA,CAACF,SAAS;MACNsB,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZC,MAAM,EAAE,CAAC;QACLC,QAAQ,EAAEf,gBAAgB,CAACH,KAAK,CAACA,KAAK,CAACmB,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAClDC,QAAQ,CAAC,CAAC,CACVC,SAAS,CAAC,CAAC,EAAElB,gBAAgB,CAACH,KAAK,CAACA,KAAK,CAACmB,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CACtDC,QAAQ,CAAC,CAAC,CAACD,MAAM,GAAG,CAAC,CAAC;QAC/BG,IAAI,EAAEtB;MACV,CAAC,CAAE;MACHuB,KAAK,EAAE,CAAC;QAAEC,SAAS,EAAE,OAAO;QAAEF,IAAI,EAAEpB;MAAM,CAAC;IAAE;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;AAEV;AAAC/B,EAAA,CAvCQD,IAAI;AAAAiC,EAAA,GAAJjC,IAAI;AAyCb,eAAeA,IAAI;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}