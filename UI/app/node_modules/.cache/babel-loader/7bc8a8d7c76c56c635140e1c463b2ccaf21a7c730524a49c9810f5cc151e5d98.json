{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\ReactProjects\\\\new\\\\Reactmachinetask\\\\UI\\\\app\\\\src\\\\components\\\\Line.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getLineData } from '../api';\nimport { LineChart } from '@mui/x-charts/LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Line() {\n  _s();\n  const [lineData, setLineData] = useState([]);\n  const [yData, setYData] = useState([]);\n  let xData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n  const generateYaxisKey = maxValue => {\n    let arr = [];\n    for (let i = 0; i <= maxValue; i += 2) {\n      arr.push(i);\n    }\n    return arr;\n  };\n  useEffect(() => {\n    getLineData().then(res => {\n      setLineData(res);\n    });\n    return () => {};\n  }, []);\n  useEffect(() => {\n    console.log('Graph data');\n    console.log(lineData);\n\n    // Create an array with 0 for each month\n    const filledYData = Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthData = lineData.find(elem => elem.x === xData[index]);\n      return monthData ? monthData.y : 0;\n    });\n    setYData(filledYData);\n  }, [lineData]);\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 500,\n    height: 300,\n    series: [{\n      data: yData\n    }],\n    xAxis: [{\n      data: xData\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Line, \"2D1OoHYh1/Te/hfLzE3OxWgXYio=\");\n_c = Line;\nexport default Line;\nvar _c;\n$RefreshReg$(_c, \"Line\");","map":{"version":3,"names":["React","useEffect","useState","getLineData","LineChart","jsxDEV","_jsxDEV","Line","_s","lineData","setLineData","yData","setYData","xData","generateYaxisKey","maxValue","arr","i","push","then","res","console","log","filledYData","Array","from","length","_","index","monthData","find","elem","x","y","width","height","series","data","xAxis","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/projects/ReactProjects/new/Reactmachinetask/UI/app/src/components/Line.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getLineData } from '../api';\r\nimport { LineChart } from '@mui/x-charts/LineChart';\r\n\r\nfunction Line() {\r\n    const [lineData, setLineData] = useState([]);\r\n    const [yData, setYData] = useState([]);\r\n\r\n    let xData = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\r\n    const generateYaxisKey = (maxValue) => {\r\n        let arr = [];\r\n        for (let i = 0; i <= maxValue; i += 2) {\r\n            arr.push(i);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    useEffect(() => {\r\n        getLineData().then((res) => {\r\n            setLineData(res);\r\n        });\r\n        return () => { };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Graph data');\r\n        console.log(lineData);\r\n\r\n        // Create an array with 0 for each month\r\n        const filledYData = Array.from({ length: 12 }, (_, index) => {\r\n            const monthData = lineData.find((elem) => elem.x === xData[index]);\r\n            return monthData ? monthData.y : 0;\r\n        });\r\n\r\n        setYData(filledYData);\r\n    }, [lineData]);\r\n\r\n    return (\r\n        <LineChart\r\n            width={500}\r\n            height={300}\r\n            series={[{ data: yData, },]}\r\n            xAxis={[{ data: xData }]}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Line;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,SAAS,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,IAAIW,KAAK,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAEjG,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;IACnC,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,QAAQ,EAAEE,CAAC,IAAI,CAAC,EAAE;MACnCD,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;IACf;IACA,OAAOD,GAAG;EACd,CAAC;EAEDf,SAAS,CAAC,MAAM;IACZE,WAAW,CAAC,CAAC,CAACgB,IAAI,CAAEC,GAAG,IAAK;MACxBV,WAAW,CAACU,GAAG,CAAC;IACpB,CAAC,CAAC;IACF,OAAO,MAAM,CAAE,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACZoB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzBD,OAAO,CAACC,GAAG,CAACb,QAAQ,CAAC;;IAErB;IACA,MAAMc,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAK;MACzD,MAAMC,SAAS,GAAGpB,QAAQ,CAACqB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,CAAC,KAAKnB,KAAK,CAACe,KAAK,CAAC,CAAC;MAClE,OAAOC,SAAS,GAAGA,SAAS,CAACI,CAAC,GAAG,CAAC;IACtC,CAAC,CAAC;IAEFrB,QAAQ,CAACW,WAAW,CAAC;EACzB,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;EAEd,oBACIH,OAAA,CAACF,SAAS;IACN8B,KAAK,EAAE,GAAI;IACXC,MAAM,EAAE,GAAI;IACZC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE1B;IAAO,CAAC,CAAG;IAC5B2B,KAAK,EAAE,CAAC;MAAED,IAAI,EAAExB;IAAM,CAAC;EAAE;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV;AAAClC,EAAA,CA1CQD,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AA4Cb,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}